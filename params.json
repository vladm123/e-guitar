{"name":"e-guitar","tagline":"freelance progress tracker","body":"# User stories\r\n\r\n1. As a freelancer I want to be able to register the time I spend on my projects, so that I can document time spent for my customers.\r\n2. As a freelancer I want to be able to get an overview of my time registrations, so that I know how much I have worked.\r\n\r\n# Overview\r\n\r\nFreelancers are now able to register intervals of time in which they worked for specific projects. They can share their progress and working hours to the customers via permanent links. Freelancers can get an overview of their time spent for each task.\r\n\r\n![Overview](https://raw.github.com/vladm123/e-guitar/master/public/screenshots/overview.png)\r\n\r\n# Stack\r\n\r\n* **Database**: [mongodb](http://www.mongodb.org/)\r\n* **Backend**: [node](http://nodejs.org/), [express](http://expressjs.com/)\r\n* **Frontend**: [jQuery](http://jquery.com/)\r\n* **Test**: [mocha](http://visionmedia.github.io/mocha/), [should](https://github.com/visionmedia/should.js/)\r\n\r\n# UI\r\n\r\n`GET /`\r\nShows information related to all projects, which allow:\r\n* **add**: select the add option from the project manager\r\n* **modify**: click the project title and select the change option from the project manager\r\n* **remove**: click the project title and select the remove option from the project manager\r\n\r\n![Edit project](https://raw.github.com/vladm123/e-guitar/master/public/screenshots/edit.png)\r\n\r\nEach project can contain zero or more tasks, which can be:\r\n* **start -> work in progress**: click the + option from the project, which will make it orange and empty\r\n* **work in progress -> complete**: click the project circle, which will change it to green and full\r\n\r\n![Finish a task](https://raw.github.com/vladm123/e-guitar/master/public/screenshots/finish.png)\r\n\r\n`GET /{identifier}`\r\nShows read-only information related to a specific project.\r\nThis can be easily shared with customers.\r\n\r\n# API\r\n\r\n## Projects\r\n\r\n### List\r\n\r\n`GET /projects`\r\nSelects all projects, along with the tasks for each project.\r\nReturns the following information:\r\n* `200`, along with the selected projects in JSON format, if the request was successful.\r\n\r\n### Select\r\n\r\n`GET /projects/{identifier}`\r\nSelects the project by identifier.\r\nThe identifier must be a 24-character string of hexadecimals.\r\nReturns the following information:\r\n* `200`, along with the selected project in JSON format, if the request was successful.\r\n* `400`, if the identifier was invalid.\r\n* `404`, if the project was not found.\r\n\r\n### Insert\r\n\r\n`POST /projects/insert`\r\n`{\"name\": <name>[, \"description\": <descripion>]}`\r\nInserts the project specified in the body in JSON format.\r\nThe name must be a none-mpty string.\r\nReturns the following information:\r\n* `201`, along with the project URL in the header location and the inserted project in JSON format, if the request was successful.\r\n* `400`, if the name was not defined or was the empty string.\r\n* `404`, if the project was not found.\r\n\r\n### Update\r\n\r\n`POST /projects/{identifier}/update`\r\n`{\"name\": <name>[, \"description\": <descripion>]}`\r\nUpdates the project by identifier specified in the body in JSON format.\r\nThe identifier must be a 24-character string of hexadecimals.\r\nThe name must be a non-empty string.\r\nReturns the following information:\r\n* `200`, along with the updated project in JSON format, if the request was successful.\r\n* `400`, if the identifier was invalid.\r\n* `400`, if the name was not defined or was the empty string.\r\n* `404`, if the project was not found.\r\n\r\n### Delete\r\n\r\n`POST /projects/{identifier}/delete`\r\n``\r\nDeletes the project by identifier.\r\nThe identifier must be a 24-character string of hexadecimals.\r\nReturns the following information:\r\n* `200`, along with the deleted project in JSON format, if the request was successful.\r\n* `400`, if the identifier was invalid.\r\n* `404`, if the project was not found.\r\n\r\n## Tasks\r\n\r\n### List\r\n\r\nThe tasks are listed as part of each project.\r\nThere is no need for an API method to expose them on their own.\r\n\r\n### Select\r\n\r\nThe tasks are listed as part of each project.\r\nThere is no need for an API method to expose them on their own.\r\n\r\n\r\n### Insert\r\n\r\n`POST /projects/{identifier}/tasks/insert`\r\n`{[\"start\": <start>[, \"end\": <end>]]}`\r\nUpdates the project by identifier by inserting the task specified in the body in JSON format.\r\nThe identifier must be a 24-character string of hexadecimals.\r\nThe start must be a long number representing the epoch time, if exists.\r\nThe start is populated with the current epoch time, if not exists.\r\nThe end must be a long number representing the epoch time, if exists.\r\nReturns the following information:\r\n* `201`, along with the project URL in the header location and the updated project in JSON format, if the request was successful.\r\n* `400`, if the identifier was invalid.\r\n* `400`, if the start was invalid.\r\n* `400`, if the end was invalid.\r\n* `404`, if the project was not found.\r\n\r\n### Update\r\n\r\n`POST /projects/{identifier}/tasks/update`\r\n`{\"start\": <start>[, \"end\": <end>]}`\r\nUpdates the project by identifier by updating the task specified in the body in JSON format.\r\nThe tasks that have the same start date as the provided start date are updated.\r\nThe identifier must be a 24-character string of hexadecimals.\r\nThe start must be a long number representing the epoch time.\r\nThe end must be a long number representing the epoch time, if exists.\r\nReturns the following information:\r\n* `200`, along with the updated project in JSON format, if the request was successful.\r\n* `400`, if the identifier was invalid.\r\n* `400`, if the start was missing.\r\n* `400`, if the start was invalid.\r\n* `400`, if the end was invalid.\r\n* `404`, if the project was not found.\r\n\r\n### Delete\r\n\r\n`POST /projects/{identifier}/tasks/update`\r\n`{\"start\": <start>}`\r\nUpdates the project by identifier by deleting the task specified in the body in JSON format.\r\nThe tasks that have the same start date as the provided start date are deleted.\r\nThe identifier must be a 24-character string of hexadecimals.\r\nThe start must be a long number representing the epoch time.\r\nReturns the following information:\r\n* `200`, along with the updated project in JSON format, if the request was successful.\r\n* `400`, if the identifier was invalid.\r\n* `400`, if the start was missing.\r\n* `400`, if the start was invalid.\r\n* `404`, if the project was not found.\r\n\r\n# Extensions\r\n\r\n* Client code is written in pure jQuery. Some methods might be split and encapsulated.\r\n* Permanent link identifier coincides with the project identifier. This can be changed to a secret string.\r\n* Added extensive automation for project selection. Same pattern can be applied to the others.\r\n* Coupled the model to the mongo. Another layer can be implemented so that database is abstracted out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}